apply plugin: 'maven'
apply plugin: 'maven-publish'

// handle overrides from system properties : url where to deploy, targetServerId to look for in local maven settings.xml, version of artifacts, group id of artifacts
String deployUrl = System.getProperty('deploy.url', 'file:///tmp/soapui-build')
String targetServerId = System.getProperty('deploy.targetServerId', 'localhost')
String soapuiVersion = System.getProperty('deploy.version')
String soapuiGroupId = System.getProperty('deploy.groupId')

// get values from the pom if it was not specified with a system property
def mavenParentProject = new XmlSlurper().parse('pom.xml')
String mavenSoapuiProjectSubdir = 'soapui'
String mavenSoapuiMavenPluginProjectSubdir = 'soapui-maven-plugin'
def mavenSoapuiProject = new XmlSlurper().parse("$mavenSoapuiProjectSubdir/pom.xml")
def mavenSoapuiMavenPluginProject = new XmlSlurper().parse("$mavenSoapuiMavenPluginProjectSubdir/pom.xml")

if (!soapuiVersion) { soapuiVersion = mavenParentProject.version }
if (!soapuiGroupId) { soapuiGroupId = mavenParentProject.groupId }
String soapuiArtifactId = mavenSoapuiProject.artifactId
String soapuiMavenPluginArtifactId = mavenSoapuiMavenPluginProject.artifactId

logger.quiet "soapuiVersion : $soapuiVersion"
logger.quiet "soapuiGroupId : $soapuiGroupId"
logger.quiet "soapuiArtifactId : $soapuiArtifactId"
logger.quiet "soapuiMavenPluginArtifactId : $soapuiMavenPluginArtifactId"

repositories {
    mavenLocal()
    maven {
        name 'Maven deploy on local network'
        url deployUrl
    }
    mavenCentral()
}

task wrapper(type:Wrapper){ gradleVersion = '1.12' }

def getMavenSettingsCredentials = {
    String m2Repo = System.getProperty( "M2_REPO" ) ?: System.getProperty("user.home") + "/.m2/repository"
    String m3Repo = System.getProperty( "M3_REPO" ) ?: System.getProperty("user.home") + "/.m3/repository"
    File mavenRepoDir = new File(m3Repo)
    if (!mavenRepoDir.exists()) {
        mavenRepoDir = new File(m2Repo)
    }
    if (!mavenRepoDir.exists()) {
        logger.warn("WARNING : didn't find a maven local repository folder, tried ${m3Repo} and then ${m2Repo}")
        return []
    }
    File mavenSettings = new File(mavenRepoDir.parentFile, "settings.xml")
    if (! mavenSettings.exists()) {
        logger.warn("WARNING : tried to load maven settings from '${mavenSettings.absolutePath}', but that file does not exist.")
        return []
    }
    logger.quiet("Using maven settings from ${mavenSettings.canonicalPath}")
    return new XmlSlurper().parse(mavenSettings)."servers"."server"
}

def getCredentials = {
    def entries = getMavenSettingsCredentials()
    def credentials = [:]
    for (entry in entries) {
        logger.quiet("looking at ${entry.id.text()}")
        if ( entry."id".text() == targetServerId ) {
            credentials = [username: entry.username.text(), password: entry.password.text()]
        }
    }
    if (credentials.isEmpty()) {
        logger.warn("WARNING: could not find an entry for server id '${targetServerId}' in maven settings.")
        return [:]
    } else {
        return credentials
    }
}

def creds = getCredentials()
logger.quiet("Uploading to $targetServerId")
if (! creds.isEmpty()) {
    logger.quiet "   connecting as user '${creds.username}'"
}

def soapuiJar = file("${mavenSoapuiProjectSubdir}/target/${soapuiArtifactId}-${soapuiVersion}.jar")
def soapuiMavenPluginJar = file("${mavenSoapuiMavenPluginProjectSubdir}/target/${soapuiMavenPluginArtifactId}-${soapuiVersion}.jar")

publishing {
    publications {
        soapuiProject(MavenPublication) {
            groupId soapuiGroupId
            artifactId 'soapui-project'
            version soapuiVersion
        }
        soapui(MavenPublication) {
            groupId soapuiGroupId
            artifactId soapuiArtifactId
            version soapuiVersion

            artifact soapuiJar
        }
        soapuiMavenPlugin(MavenPublication) {
            groupId soapuiGroupId
            artifactId soapuiMavenPluginArtifactId
            version soapuiVersion

            artifact soapuiMavenPluginJar
        }
    }
    repositories {
        maven {
            url deployUrl
            if (!creds.isEmpty()) {
                authentication(userName: creds.username, password: creds.password)
            }
        }
    }
}
